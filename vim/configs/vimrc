call plug#begin('~/.vim/plugged')

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries'}

" auto complete plug; deoplete for vim8.0 need `has('python3')` for async
" `pip3 install neovim` is required or `pacin python-neovim` in archlinux
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

" complete for golang
Plug 'zchee/deoplete-go', { 'do': 'make'}

" Track the engine.
" Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Tagbar: a class outline viewer for Vim
Plug 'majutsushi/tagbar'

" zoom a pane by 'ctrl-w o'
Plug 'vim-scripts/ZoomWin'

" mini buffer expl
Plug 'fholgado/minibufexpl.vim'

" unload file buffer without destory window layout
Plug 'qpkorr/vim-bufkill'

" Initialize plugin system
call plug#end()

" Use deoplete.
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_yarp = 1
let g:deoplete#enable_camel_case = 1
let g:deoplete#enable_refresh_always = 1
inoremap <silent><expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

nmap <F2> :NERDTreeToggle<CR>:MBEOpenAll<CR>
nmap <F8> :TagbarToggle<CR>
nmap <F9> :GoImports<CR>:GoFmt<CR>:GoBuild<CR>
nmap <F10> :wa<CR>:GoRun<CR>
nmap <F5> :wa \|!rm ./routers/commentsRouter*.go<CR>:!bee run goWebTest<CR>

nnoremap <silent> <C-w>w :ZoomWin<CR>

" set ctrl-hjkl to switch splited windows
map <c-h> <c-w>h
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l

set nu
set hlsearch
set ts=4
set expandtab
set backspace=indent,eol,start
set mouse=a

syntax enable
set t_Co=256
set background=dark
colorscheme Tomorrow-Night

" set viminfo location 
set viminfo+=n~/.vim/viminfo

" show last edit position when we reopen file 
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif  

" set python3 first
set pyxversion=0

" tagbar with golang settings
" ensure ctags exist.(`pacin ctags` for archlinux)
" go get -u github.com/jstemmer/gotags
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

" set tags search from current directory to root
set tags=tags;

" set transparent
hi Normal ctermbg=NONE
